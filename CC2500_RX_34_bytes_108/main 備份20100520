#include <avr\io.h>
#include <avr/interrupt.h>
#include <UART&TIMER1.h>
#include <USI.h>
#include <CC1100.h>
#include <CC1100Control.h>
#include <RX&TX_Module.h>

#define length 32

unsigned char rxBuffer[32] = {51,50,49,48,51,50,49,48,51,50,49,48,51,50,49,48,51,50,49,48,51,50,49,48,51,50,49,48,51,50,49,48};
unsigned char txBuffer[32] = {48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51};
volatile unsigned char flag = 0;	// RX Mode
	//						  0		   TX Mode
unsigned char i=0,j=0,garbage;

ISR( SIG_USART0_RX )
{
	txBuffer[j] = UDR;
	
	j++;
	if(j>31)
	{
		j=0;
		flag = 0;
	}
}

/*ISR( SIG_OVERFLOW1 )
{
	TIMER1_1sec_Init();
			for( i=0 ; i<8 ; i++ )
		{
			txBuffer[4*i]++;
			txBuffer[4*i+1]++;
			txBuffer[4*i+2]++;
			txBuffer[4*i+3]++;
		}
		j++;
		if(j>5)
		{
			j=0;
			for( i=0 ; i<8 ; i++ )
			{
				txBuffer[4*i]   = 48;
				txBuffer[4*i+1] = 49;
				txBuffer[4*i+2] = 50;
				txBuffer[4*i+3] = 51;
			}			
		}
	flag = 0;
} 
*/
int main(void)
{
	USI_Init();
	USART_Init(19200);
	CC1100Initial();
	USART_Transmit_char_to_ASCII( 0x6f );		// boot finished.(show 111)
	
	CC1100WriteStrobe( SIDLE );
	CC1100WriteStrobe( SFRX );
	CC1100WriteStrobe( SRX );
	
	sei();
	
	while(1)
	{
		while( !CHKBIT(PINB, GDO0) )//*** 				// wait until RX start
			if(flag!=1)	break;
		while(  CHKBIT(PINB, GDO0) )//*** 				// wati until RX finish
			if(flag!=1)break;
		if(flag)
		{
			CC1100WriteStrobe( SRX );					// RX start again
			CC1100ReadFromRXFIFO( rxBuffer , length );	// Read from the RX FIFO
			
			for( i=0 ; i<32 ; i++ )
				USART_Transmit( rxBuffer[i] );			// serial port output rxBuffer
		}
			else
			{
				CC1100WriteStrobe( SIDLE );
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
				CC1100WriteStrobe( SFTX );
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
				CC1100WriteStrobe( SFSTXON );
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
				CC1100WriteStrobe( STX );
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
				
				while( CHKBIT(PINB, GDO0) ); 				// fill TX FIFO and start TX
				CC1100WriteToTXFIFO( txBuffer , length );	// Fill up the TX FIFO
				CC1100WriteStrobe( STX );					// TX start again
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
				while( !CHKBIT(PINB, GDO0) );				// wait until TX start to continue
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
				
				for( i=0 ; i<32 ; i++ )
					USART_Transmit( txBuffer[i] );			// serial port output txBuffer
				flag = 1;
				
//				CC1100WriteStrobe( SIDLE );
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
//				CC1100WriteStrobe( SFRX );
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
//				CC1100WriteStrobe( SRX );
//				USART_Transmit_char_to_ASCII( CC1100ReadStatus( MARCSTATE ) );
				
			}





/*		if( flag )
		{
			CC1100WriteStrobe( SIDLE );
			CC1100WriteStrobe( SFRX );
			CC1100WriteStrobe( SRX );
			
			while( !CHKBIT(PINB, GDO0) )// 				// wait until RX start
				if(flag!=1)break;
			while(  CHKBIT(PINB, GDO0) )// 				// wati until RX finish
				if(flag!=1)break;
			if(flag)
			{
			CC1100WriteStrobe( SRX );					// RX start again
			CC1100ReadFromRXFIFO( rxBuffer , length );	// Read from the RX FIFO
			
			for( i=0 ; i<32 ; i++ )
				USART_Transmit( rxBuffer[i] );			// serial port output rxBuffer
			}
		}
*/			/*if(flag!=1)*//*else
			{
				CC1100WriteStrobe( SIDLE );
				CC1100WriteStrobe( SFTX );
				CC1100WriteStrobe( SFSTXON );
				CC1100WriteStrobe( STX );
				
				while( CHKBIT(PINB, GDO0) ); 				// fill TX FIFO and start TX
				CC1100WriteToTXFIFO( txBuffer , length );	// Fill up the TX FIFO
				CC1100WriteStrobe( STX );					// TX start again
				while( !CHKBIT(PINB, GDO0) );				// wait until TX start to continue
				
				for( i=0 ; i<32 ; i++ )
					USART_Transmit( txBuffer[i] );			// serial port output txBuffer
				flag = 1;
				
				
				
			}
*/
/*		if( flag )
			while( RX_Module( rxBuffer , length ) )			// wait RX complete
				for( i=0 ; i<32 ; i++ )
					USART_Transmit( rxBuffer[i] );			// serial port output rxBuffer
			else
				while( TX_Module( txBuffer , length ) )		// wait TX complete
				{
					for( i=0 ; i<32 ; i++ )
						USART_Transmit( txBuffer[i] );		// serial port output txBuffer
					flag = 1;
				}
*/	}
}

